# -*- coding: utf-8 -*-

from ymc.lib import authentication as ApiAuthentication

from ymc.model import User
from ymc.model import Game
from ymc.model import Developer
from ymc.model import UsersGames

from django.test.client import Client
from django.forms.models import model_to_dict

import datetime
import calendar
from django.utils.timezone import utc
import unittest, json, re

from django.test import TestCase
from django.test import RequestFactory

from api.views import users as ApiUsersView

def test_cases():
    return [
        'test_update',
    ]

"""
    GamesTestCase
"""
class GamesTestCase(TestCase):

    API_FAIL = 0
    API_SUCCESS = 1

    """
    # Build up a game object
    """
    def setUp(self):

        values = dict(
            title='test',
            developer_id = self.developer.id,
            ymc_id='77777777777777777777777',
        )

        self.games = Game.Build(values)
        self.games.save()

        values = dict(
            title='test allow login no register',
            developer_id = self.developer.id,
            ymc_id='99999999999999999999999',
            app_id='initial_id',
            allow_unregistered_login=True,
        )

        self.games_noreg = Game.Build(values)
        self.games_noreg.save()

        self.request_factory = RequestFactory()


    """
    # Not sure what to do here
    """
    def tearDown(self):
        self.user = None
        self.games = None
        self.games_noreg = None
        self.request_factory = RequestFactory()

    """
    # Tests signature generation
    """
    def test_update(self):
        print('\n========= test_update =========\n')

        client = Client()

        game_update_data = {
                'gid':'77777777777777777777777'
                'app_id':'new_app_id',
            }
        game_update_data['_sig'] = ApiAuthentication.Sign(game_update_data)
        print(game_update_data)

        response = client.post(
                /'api/games/update',
                data=game_update_data,
                **{'wsgi.url_scheme': 'https'}
            )

            json_response = json.loads(response.content)
            print(json_response)

            self.assertEqual(json_response["status"], API_SUCCESS)

    def test_developer_signup(self):
        print('\n========== test_logout==========\n')

        client = Client()

        # Try logging in users
        print("Logging in a bunch of developers...")
        developer_signup_data = [
            {'data': {'username': 'developer_user', 'email': 'devuser1@example.com', 'password': 'changeme', 'gid': '77777777777777777777777'}, 'expect': self.API_FAIL},
            {'data': {'username': 'developer_user', 'email': 'devuser1@example.com', 'password': 'changeme', 'developer_name': 'Scott\'s Crazy Game Studio','gid': '77777777777777777777777'}, 'expect': self.API_SUCCESS},
            {'data': {'username': 'developer_user', 'email': 'devuser1@example.com', 'password': 'changeme', 'developer_name': u'erere@这个游戏规则','gid': '77777777777777777777777'}, 'expect': self.API_FAIL},
            {'data': {'username': 'developer_user', 'email': 'devuser2@example.com', 'password': 'changeme', 'developer_name': u'erere@这个游戏规则','gid': '77777777777777777777777'}, 'expect': self.API_SUCCESS},
        ]

        for signup_data in developer_signup_data:
            signup_data['data']['_sig'] = ApiAuthentication.Sign(signup_data['data'])
            print(signup_data['data'])
            response = client.post('/api/developers/register', data=signup_data['data'], **{'wsgi.url_scheme': 'https'})

            json_response = json.loads(response.content)
            print(json_response)

            self.assertEqual(json_response["status"], signup_data['expect'])




        print("\n\n\n\n\n")
