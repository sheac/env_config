<?php defined('SYSPATH') or die('No direct script access.');

// -- Environment setup --------------------------------------------------------

// Load the core Kohana class
require SYSPATH.'classes/Kohana/Core'.EXT;

if (is_file(APPPATH.'classes/Kohana'.EXT))
{
    // Application extends the core
    require APPPATH.'classes/Kohana'.EXT;
}
else
{
    // Load empty core extension
    require SYSPATH.'classes/Kohana'.EXT;
}

/**
 * Set the default time zone.
 *
 * @link http://kohanaframework.org/guide/using.configuration
 * @link http://www.php.net/manual/timezones
 */
date_default_timezone_set('America/Chicago');

/**
 * Set the default locale.
 *
 * @link http://kohanaframework.org/guide/using.configuration
 * @link http://www.php.net/manual/function.setlocale
 */
setlocale(LC_ALL, 'en_US.utf-8');

/**
 * Enable the Kohana auto-loader.
 *
 * @link http://kohanaframework.org/guide/using.autoloading
 * @link http://www.php.net/manual/function.spl-autoload-register
 */
spl_autoload_register(array('Kohana', 'auto_load'));




/**
 * Optionally, you can enable a compatibility auto-loader for use with
 * older modules that have not been updated for PSR-0.
 *
 * It is recommended to not enable this unless absolutely necessary.
 */
//spl_autoload_register(array('Kohana', 'auto_load_lowercase'));

/**
 * Enable the Kohana auto-loader for unserialization.
 *
 * @link http://www.php.net/manual/function.spl-autoload-call
 * @link http://www.php.net/manual/var.configuration#unserialize-callback-func
 */
ini_set('unserialize_callback_func', 'spl_autoload_call');

// -- Configuration and initialization -----------------------------------------

Cookie::$salt = 'ymcconnect-27bbd09a-cce4-47da-8b00-33af7c38acde';



/**
 * Set Kohana::$environment if a 'KOHANA_ENV' environment variable has been supplied.
 *
 * Note: If you supply an invalid environment name, a PHP warning will be thrown
 * saying "Couldn't find constant Kohana::<INVALID_ENV_NAME>"
 */
if (isset($_SERVER['KOHANA_ENV']))
{
    Kohana::$environment = constant('Kohana::'.strtoupper($_SERVER['KOHANA_ENV']));
}

/**
 * Initialize Kohana, setting the default options.
 *
 * The following options are available:
 *
 * - string   base_url    path, and optionally domain, of your application   NULL
 * - string   index_file  name of your index file, usually "index.php"       index.php
 * - string   charset     internal character set used for input and output   utf-8
 * - string   cache_dir   set the internal cache directory                   APPPATH/cache
 * - integer  cache_life  lifetime, in seconds, of items cached              60
 * - boolean  errors      enable or disable error handling                   TRUE
 * - boolean  profile     enable or disable internal profiling               TRUE
 * - boolean  caching     enable or disable internal caching                 FALSE
 * - boolean  expose      set the X-Powered-By header                        FALSE
 */
Kohana::init(array(
    'base_url'   => '/',
    'index_file' => FALSE,
    'errors' => TRUE,
));

/**
 * Attach the file write to logging. Multiple writers are supported.
 */
Kohana::$log->attach(new Log_File(APPPATH.'logs'));

/**
 * Attach a file reader to config. Multiple readers are supported.
 */
$config = Kohana::$config->attach(new Config_File);

$settings = Kohana::$config->load('settings');


/**
 * Set the default language
 * The language_change variable determines whether language change is available. 
 * If it isn't, the links are stripped from the header and the language is forced to en-us.
 * It is default to true if not set.
 */
$settings->language_change = true;

$lang = Cookie::get('lang','en-us');

if(!in_array($lang,array('en-us','ch'))){
    $lang = 'en-us';
}

I18n::lang($settings->language_change ? $lang : 'en-us');




/**
 * Enable modules. Modules are referenced by a relative or absolute path.
 */
Kohana::modules(array(
    // 'auth'       => MODPATH.'auth',       // Basic authentication
    // 'cache'      => MODPATH.'cache',      // Caching with multiple backends
    // 'codebench'  => MODPATH.'codebench',  // Benchmarking tool 
    'database'   => MODPATH.'database',   // Database access
    // 'image'      => MODPATH.'image',      // Image manipulation
    'minion'     => MODPATH.'minion',     // CLI Tasks
    'orm'        => MODPATH.'orm',        // Object Relationship Mapping
    // 'unittest'   => MODPATH.'unittest',   // Unit testing
    // 'userguide'  => MODPATH.'userguide',  // User guide and API documentation
    'email' => MODPATH.'email', // Swift mailer
    ));


define('ENVIRONMENT', 'published');

/**
 * Set the routes. Each route must have a minimum of a name, a URI and a set of
 * defaults for the URI.
 */

/* Admin Routes
*/
Route::set('admin_docs','admin/sdks/docs(/<action>(/<id>))',array('action' => '(new|edit|delete|show)'))
    ->defaults(array(
        'controller' => 'admin_docs',
        'action' => 'index',
        ));

Route::set('admin_sdk', 'admin/sdks(/<action>(/<id>))', array('action' => '(new|edit|delete)'))
    ->defaults(array(
        'controller' => 'admin_sdk', 
        'action' => 'index', 
    ));

Route::set('admin_files', 'admin/files(/<action>(/<id>))', array('action' => '(ajaxshow|download|upload|new)'))
    ->defaults(array(
        'controller' => 'admin_files', 
        'action' => 'index', 
    ));

Route::set('admin_game', 'admin/games(/<action>(/<id>))', array())
    ->defaults(array(
        'controller' => 'admin_games', 
        'action' => 'index', 
    ));
    
Route::set('admin_test', 'admin/test(/<action>(/<id>))', array())
    ->defaults(array(
        'controller' => 'admin_test', 
        'action' => 'index', 
    ));


/**
    User Routes
**/
Route::set('users', 'users(/<action>(/<id>))', array('action'=>'(login|signup|ajaxlogin|ajaxlogout|change_language)'))
    ->defaults(array(
        'controller' => 'users',
        'action'     => 'index',
    ));

/**
    User Games
**/
Route::set('games', 'games(/<action>(/<id>))', array('action'=>'(show|provision_download|server_file_download)'))
    ->defaults(array(
        'controller' => 'games',
        'action'     => 'show',
    ));

Route::set('docs','sdks/docs(/<action>(/<id>))',array('action' => '(show)'))
    ->defaults(array(
        'controller' => 'docs',
        'action' => 'index',
        ));

Route::set('sdks', 'sdks(/<action>(/<id>))', array('action'=>'(download|documentation)'))
    ->defaults(array(
        'controller' => 'sdks',
        'action'     => 'index',
    ));


/**
    Files Routes
**/
Route::set('files', 'files(/<action>(/<id>))', array('action'=>'(new|ajaxedit|download|upload)'))
    ->defaults(array(
        'controller' => 'files',
        'action'     => 'index',
    ));


/**
    Pages Routes
**/
Route::set('pages', '<action>', array('action'=>'(about|contact|contactconfirm)'))
    ->defaults(array(
        'controller' => 'pages',
        'action'     => 'index',
    ));

Route::set('default', '(<controller>(/<action>(/<id>)))')
    ->defaults(array(
        'controller' => 'pages',
        'action'     => 'index',
    ));
