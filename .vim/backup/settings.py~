# Django settings for ymc_platform project.
import os.path

DEBUG = True
TEMPLATE_DEBUG = DEBUG

ADMINS = (
     ('YMC OPS', 'ops@ymcnetwork.com'),
)

MANAGERS = ADMINS

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2', # Add 'postgresql_psycopg2', 'mysql', 'sqlite3' or 'oracle'.
        'NAME': 'ymc_platform',                      # Or path to database file if using sqlite3.
        # The following settings are not used with sqlite3:
        'USER': 'ymc',
        'PASSWORD': '123',
        'HOST': 'localhost',                      # Empty for localhost through domain sockets or '127.0.0.1' for localhost through TCP.
        'PORT': '',                      # Set to empty string for default.
    }
}

# Hosts/domain names that are valid for this site; required if DEBUG is False
# See https://docs.djangoproject.com/en/1.5/ref/settings/#allowed-hosts
ALLOWED_HOSTS = [
    'api.ymcgames.com',
    'test.ymcgames.com',
    'ec2-54-234-199-184.compute-1.amazonaws.com',
    '54.234.199.184'
]

# Local time zone for this installation. Choices can be found here:
# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name
# although not all choices may be available on all operating systems.
# In a Windows environment this must be set to your system time zone.
TIME_ZONE = 'UTC'

# Language code for this installation. All choices can be found here:
# http://www.i18nguy.com/unicode/language-identifiers.html
LANGUAGE_CODE = 'en-us'

SITE_ID = 1

# If you set this to False, Django will make some optimizations so as not
# to load the internationalization machinery.
USE_I18N = True

# If you set this to False, Django will not format dates, numbers and
# calendars according to the current locale.
USE_L10N = True

# If you set this to False, Django will not use timezone-aware datetimes.
USE_TZ = True

# Absolute filesystem path to the directory that will hold user-uploaded files.
# Example: "/var/www/example.com/media/"
MEDIA_ROOT = ''

# URL that handles the media served from MEDIA_ROOT. Make sure to use a
# trailing slash.
# Examples: "http://example.com/media/", "http://media.example.com/"
MEDIA_URL = ''

# Absolute path to the directory static files should be collected to.
# Don't put anything in this directory yourself; store your static files
# in apps' "static/" subdirectories and in STATICFILES_DIRS.
# Example: "/var/www/example.com/static/"
STATIC_ROOT = ''

# URL prefix for static files.
# Example: "http://example.com/static/", "http://static.example.com/"
STATIC_URL = '/static/'


PROJECT_DIR = os.path.dirname(os.path.realpath(__file__));
BASE_DIR = os.path.realpath(PROJECT_DIR+'/..')
APP_PATH = os.path.join(BASE_DIR, 'app')
API_PATH = os.path.join(BASE_DIR, 'api')
YMC_PATH = os.path.join(BASE_DIR, 'ymc')



# EMAIL
EMAIL_TEMPLATE_PATHS = os.path.join(YMC_PATH, 'emails/templates')
EMAIL_FROM_ADDRESS = 'support@ymcgames.com'


# Additional locations of static files
STATICFILES_DIRS = (
    os.path.join(APP_PATH, "static/css"),
    os.path.join(APP_PATH, "static/javascript"),
    os.path.join(APP_PATH, "static/images"),

    # Put strings here, like "/home/html/static" or "C:/www/django/static".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
)

# List of finder classes that know how to find static files in
# various locations.
STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
#    'django.contrib.staticfiles.finders.DefaultStorageFinder',
)

# Make this unique, and don't share it with anybody.
SECRET_KEY = '%p#5+derxzgo#i_cbf1=(r%byzprgj2o=y%=%)ys_ux8y!ti3a'

# Using Cookie-based sessions
SESSION_ENGINE =  'django.contrib.sessions.backends.signed_cookies'
SESSION_COOKIE_AGE = (60*60*30)

# List of callables that know how to import templates from various sources.
TEMPLATE_LOADERS = (
    'django.template.loaders.filesystem.Loader',
    'django.template.loaders.app_directories.Loader',
#     'django.template.loaders.eggs.Loader',
)

MIDDLEWARE_CLASSES = (
    # 'django.middleware.common.CommonMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    # 'django.contrib.auth.middleware.AuthenticationMiddleware',
    # 'django.contrib.messages.middleware.MessageMiddleware',
    # Uncomment the next line for simple clickjacking protection:
    # 'django.middleware.clickjacking.XFrameOptionsMiddleware',
)


ROOT_URLCONF = 'ymc_platform.urls'

# Python dotted path to the WSGI application used by Django's runserver.
WSGI_APPLICATION = 'ymc_platform.wsgi.application'


TEMPLATE_DIRS = (
    os.path.join(APP_PATH, 'templates'),

    # Put strings here, like "/home/html/django_templates" or "C:/www/django/templates".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
)

INSTALLED_APPS = (
    # 'django.contrib.auth',
    # 'django.contrib.contenttypes',
    # 'django.contrib.sessions',
    # 'django.contrib.sites',
    # 'django.contrib.messages',
    'django.contrib.staticfiles',
    # Uncomment the next line to enable the admin:
    # 'django.contrib.admin',
    # Uncomment the next line to enable admin documentation:
    # 'django.contrib.admindocs',
    'api',
    'app',
    'ymc',
    'south',
)

# A sample logging configuration. The only tangible logging
# performed by this configuration is to send an email to
# the site admins on every HTTP 500 error when DEBUG=False.
# See http://docs.djangoproject.com/en/dev/topics/logging for
# more details on how to customize your logging configuration.
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler'
        }
    },
    'loggers': {
        'django.request': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': True,
        },
    }
}

# YMC Specific Settings
SESSION_COOKIE_NAME = 'session_token'
YMC_SERVER_TOKEN = '8b50b2a8be8a11e2878a080027dde1ce'

YMC_DEVELOPER_SITE_GAME_ID = '5b8439c4fa3911e284c212313b0ace15'

#DEVELOPER_SITE_RESET_PASSWORD_BASE_ADDRESS = 'http://192.168.1.51' # Jacky's test env
DEVELOPER_SITE_RESET_PASSWORD_BASE_ADDRESS = 'https://developer.ymcgames.com'

RESET_PASSWORD_ADDRESS = 'https://ymcgames.com/users/reset/'
#RESET_PASSWORD_ADDRESS = 'http://192.168.1.188/users/reset/'


# TODO find a better way to send updates to all YMCA proxy servers
#   - the problem with this is every time we add or remove a server/address
#     we have to update settings in an entirely different
#     frickin' project from YMCA in response to server config alterations
#   - see jira issue
if( True ):
# if( not DEBUG ):
    YMC_ANALYTICS_SERVER_SYNC_URLS = [
            'http://yax01.ymcnetwork.com/updateAuth',
            'http://yax02.ymcnetwork.com/updateAuth',
        ]

else:
    YMC_ANALYTICS_SERVER_SYNC_URLS = ['http://localhost/updateAuth']


if( not DEBUG ):
    import logging

    logging.basicConfig(
        level = logging.INFO,
        format = '%(asctime)s %(levelname)s %(message)s',
        filename = '/var/log/nginx/djangoLog.log',
    )

# for the user-counter page
USER_COUNTER_PASSWORD = "bowie"
EMAIL_LIST_PASSWORD = "please"

EMAIL_LIST_EXCLUDED_IP_ADDRESSES = [
    '0.0.0.0',
    '96.53.37.62',
    '124.42.227.7',
    '124.42.224.12',
    '60.247.92.142',
]
