var database = require('../database');
var utime = require('../lib/utime').getTimePoint
var fillGap = require('../lib/utime').fillGap

var YmcaLogger = require('../../tools/logging/ymca-logger'),
    ymcaLogger = new YmcaLogger(['AggregationController-ActiveUsers']);

// API:  /revenue/:type
exports.api = function(req,res){

    var type = req.query.type;
    var ymc_id = req.query.token;
    var timezone = req.query.timezone;
    var collection = database.collectionFromName(req.query.collection_name);
//    var type = req.params.type;

    ymcaLogger.log({
        type: type,
        collection: req.query.collection_name,
        ymc_id: ymc_id
    });

    var startTime,endTime,
        group={};
//    lastDay = new Date();
//
//    if (type == 'debug') {
//        eventCollection.aggregate(
//            [{
//                $match: {
//                    event: 'YA0charge',
//                    "properties.time": {"$gte": new Date("5 1 2013"), "$lt":lastDay}
//                }
//            }],function(err,result){
//                ymcaLogger.log(result);
//                res.send(result);
//            });
//
//    } else if (type == 'day') {
////        firstDay = new Date((lastDay.getMonth())+" "+(lastDay.getDate()+0)+" "+lastDay.getFullYear());
//        firstDay = new Date(lastDay - 30 *24*60*60*1000);
//        group = {indexOfTime:{$dayOfYear : "$properties.time"},userid: "$properties.distinct_id"};
//
//
//    } else if (type == 'week') {
//        var period = 7 * 24;    // 24 weeks
//        firstDay  = new Date(lastDay - period *24*60*60*1000);
//        group = {indexOfTime:{$week : "$properties.time"},userid: "$properties.distinct_id"};
//    } else if (type == 'month') {
//        firstDay  = new Date(lastDay - 365 *24*60*60*1000);
//        group = {indexOfTime:{$month : "$properties.time"},userid: "$properties.distinct_id"};
//    }


    var result = utime[type](null, null, timezone)
    ymcaLogger.log({result:result})

    startTime = result.from_time
    endTime = result.to_time
    group = result.group

    var matchQuery = {
                "properties.YA0token":ymc_id,
                event: {$in:["login","Login","YA0login"]},
            };
    switch(timezone) {
        case "GMT":
            matchQuery['properties.time'] = {"$gte": startTime, "$lt": endTime}
            break;
        case "pacific":
            matchQuery['properties.time_pacific'] = {"$gte": startTime, "$lt": endTime}
            break;
    }

    if (result.error){
        res.send({error:result.error})
    } else {

        collection.aggregate(
            [{
                $match: matchQuery,
            },{
                $group:{
                    _id:group
                }
            },{
                $group:{
//                    _id:"$_id.indexOfTime",
                    _id:{y:"$_id.year",t:"$_id.indexOfTime"},
                    users: {$sum: 1 }
                }
            },{
                $sort:{_id:1}
            }],
            function(err,result){
                ymcaLogger.log({result:result});
                var result2 = fillGap(startTime,endTime,type,result)
                res.send(result2);
            });
    }
};
